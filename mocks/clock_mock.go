// Code generated by MockGen. DO NOT EDIT.
// Source: clock/clock.go
//
// Generated by this command:
//
//	mockgen -source clock/clock.go -destination mocks/clock_mock.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClock is a mock of Clock interface.
type MockClock struct {
	ctrl     *gomock.Controller
	recorder *MockClockMockRecorder
	isgomock struct{}
}

// MockClockMockRecorder is the mock recorder for MockClock.
type MockClockMockRecorder struct {
	mock *MockClock
}

// NewMockClock creates a new mock instance.
func NewMockClock(ctrl *gomock.Controller) *MockClock {
	mock := &MockClock{ctrl: ctrl}
	mock.recorder = &MockClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClock) EXPECT() *MockClockMockRecorder {
	return m.recorder
}

// CalculateAge mocks base method.
func (m *MockClock) CalculateAge(reference int64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateAge", reference)
	ret0, _ := ret[0].(float64)
	return ret0
}

// CalculateAge indicates an expected call of CalculateAge.
func (mr *MockClockMockRecorder) CalculateAge(reference any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateAge", reflect.TypeOf((*MockClock)(nil).CalculateAge), reference)
}

// Unix mocks base method.
func (m *MockClock) Unix() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unix")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Unix indicates an expected call of Unix.
func (mr *MockClockMockRecorder) Unix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unix", reflect.TypeOf((*MockClock)(nil).Unix))
}
